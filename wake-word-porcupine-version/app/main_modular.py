#!/usr/bin/env python3
"""
Punto de entrada principal para el asistente de voz PuertoCho.
Versi√≥n modular que utiliza los componentes separados.
"""

import asyncio
import os
import sys
import signal
import time
import logging
from typing import Optional

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

# Importaciones de m√≥dulos locales
from core.assistant import VoiceAssistant
from utils.logging_config import get_logger
from config import Config

logger = get_logger('main')

class PuertoChoApp:
    """Aplicaci√≥n principal del asistente PuertoCho"""
    
    def __init__(self):
        self.config = Config()
        self.assistant: Optional[VoiceAssistant] = None
        self.running = False
        
    def setup_signal_handlers(self):
        """Configurar manejadores de se√±ales para terminaci√≥n limpia"""
        def signal_handler(signum, frame):
            logger.info(f"Recibida se√±al {signum}, terminando...")
            self.stop()
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    async def start(self):
        """Iniciar el asistente"""
        logger.info("üöÄ Iniciando PuertoCho Assistant")
        
        try:
            # Verificar configuraci√≥n
            if not self.config.validate():
                logger.error("‚ùå Configuraci√≥n inv√°lida")
                return False
            
            # Crear y configurar el asistente
            self.assistant = VoiceAssistant(self.config)
            
            # Configurar manejadores de se√±ales
            self.setup_signal_handlers()
            
            # Inicializar el asistente
            await self.assistant.initialize()
            
            # Mostrar informaci√≥n de inicio
            logger.info("‚úÖ Asistente inicializado correctamente")
            logger.info(f"üéØ Wake words: {self.assistant.get_wake_words()}")
            logger.info(f"ü§ñ Endpoint: {self.config.get_assistant_endpoint()}")
            logger.info(f"üéµ Audio: {self.config.get_audio_config()}")
            
            # Iniciar el bucle principal
            self.running = True
            await self.assistant.run()
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error iniciando asistente: {e}")
            return False
    
    def stop(self):
        """Detener el asistente"""
        logger.info("üõë Deteniendo asistente...")
        self.running = False
        
        if self.assistant:
            self.assistant.stop()
    
    async def run(self):
        """Ejecutar la aplicaci√≥n"""
        try:
            await self.start()
        except KeyboardInterrupt:
            logger.info("Interrupci√≥n de usuario")
        except Exception as e:
            logger.error(f"Error en aplicaci√≥n: {e}")
        finally:
            self.stop()
            logger.info("üëã Aplicaci√≥n terminada")

def main():
    """Funci√≥n principal"""
    print("üéôÔ∏è  PuertoCho Voice Assistant - Versi√≥n Modular")
    print("=" * 50)
    
    app = PuertoChoApp()
    
    try:
        # Ejecutar aplicaci√≥n
        asyncio.run(app.run())
    except KeyboardInterrupt:
        print("\nüëã Hasta luego!")
    except Exception as e:
        print(f"‚ùå Error cr√≠tico: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
