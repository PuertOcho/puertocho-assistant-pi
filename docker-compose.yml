services:
  # Backend Gateway - FastAPI WebSocket Server
  puertocho-backend:
    build: 
      context: ./puertocho-assistant-backend
      dockerfile: Dockerfile
    container_name: puertocho-assistant-backend-gateway
    network_mode: host
    environment:
      - PYTHONUNBUFFERED=1
      - HARDWARE_BASE_URL=http://localhost:8080
      - BACKEND_PORT=8000
      - LOG_LEVEL=INFO
      - HARDWARE_HEALTH_CHECK_INTERVAL=30
      - AUDIO_BUFFER_SIZE=10
      - AUDIO_VERIFICATION_ENABLED=true
      - AUDIO_VERIFICATION_DAYS=7
      - AUDIO_VERIFICATION_MAX_FILES=100
      # Remote Backend Configuration
      - REMOTE_BACKEND_URL=http://192.168.1.88:10002
      - REMOTE_BACKEND_EMAIL=service@puertocho.local
      - REMOTE_BACKEND_PASSWORD=servicepass123
      - REMOTE_BACKEND_TIMEOUT=60.0
      - REMOTE_BACKEND_RETRY_ATTEMPTS=3
      - REMOTE_BACKEND_RETRY_DELAY=2.0
      # Conversation API Configuration (Epic 4.3)
      - REMOTE_BACKEND_CONVERSATION_PATH=${REMOTE_BACKEND_CONVERSATION_PATH:-/api/v1/conversation/process/audio}
      - REMOTE_BACKEND_LANGUAGE=${REMOTE_BACKEND_LANGUAGE:-es}
      - REMOTE_BACKEND_API_MODE=${REMOTE_BACKEND_API_MODE:-conversation}
      - CONVERSATION_DEFAULT_USER_ID=${CONVERSATION_DEFAULT_USER_ID:-service@puertocho.local}
      - CONVERSATION_SESSION_ID=${CONVERSATION_SESSION_ID:-}
      - DEVICE_ID=${DEVICE_ID:-puertocho-rpi-01}
      - CONVERSATION_SESSION_STRATEGY=${CONVERSATION_SESSION_STRATEGY:-sticky-per-device}
    volumes:
      - ./puertocho-assistant-backend/src:/app/src
      - ./puertocho-assistant-backend/audio_verification:/app/audio_verification
    depends_on:
      - puertocho-assistant-hardware
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Web Dashboard - Svelte Frontend with Kiosk Support
  puertocho-web-dashboard:
    build:
      context: ./puertocho-assistant-web-view
      dockerfile: Dockerfile
    container_name: puertocho-web-dashboard
    network_mode: host
    environment:
      - HOT_RELOAD_ENABLED=${HOT_RELOAD_ENABLED:-false}
      - VITE_BACKEND_WS_URL=ws://localhost:8000/ws
      - VITE_BACKEND_HTTP_URL=http://localhost:8000
      # Hot reload configuration
      - VITE_HMR_PORT=${VITE_HMR_PORT:-24678}
      - CHOKIDAR_USEPOLLING=${CHOKIDAR_USEPOLLING:-true}
      - CHOKIDAR_INTERVAL=${CHOKIDAR_INTERVAL:-1000}
      # Kiosk mode configuration
      - KIOSK_MODE=${KIOSK_MODE:-false}
      - KIOSK_RESOLUTION=${KIOSK_RESOLUTION:-1920x1080}
      - DASHBOARD_URL=http://localhost:3000
      - KIOSK_BROWSER=chromium-browser
      - KIOSK_RESTART_DELAY=5
      - DISPLAY=${DISPLAY:-:0}
    volumes:
      # Mount X11 socket for kiosk mode (only needed if KIOSK_MODE=true)
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      # Mount device for potential touch screen access
      - /dev:/dev:ro
      # Hot reload volumes (only active when HOT_RELOAD_MODE=development)
      - ./puertocho-assistant-web-view/src:/app/src
      - ./puertocho-assistant-web-view/static:/app/static
      - ./puertocho-assistant-web-view/package.json:/app/package.json
      - ./puertocho-assistant-web-view/svelte.config.js:/app/svelte.config.js
      - ./puertocho-assistant-web-view/vite.config.ts:/app/vite.config.ts
      - ./puertocho-assistant-web-view/tsconfig.json:/app/tsconfig.json
      # Exclude node_modules to avoid conflicts
      - /app/node_modules
    privileged: false  # Set to true if touch screen access is needed
    depends_on:
      - puertocho-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Hardware Service - ReSpeaker 2-Mic Pi HAT V1.0 with RGB LEDs
  puertocho-assistant-hardware:
    build:
      context: ./puertocho-assistant-hardware
      dockerfile: Dockerfile
    container_name: puertocho-assistant-hardware
    privileged: true
    network_mode: host
    user: "0:0"  # Ejecutar como root para acceso a GPIO
    env_file:
      - ./puertocho-assistant-hardware/.env
    environment:
      - PYTHONUNBUFFERED=1
      - HARDWARE_LOG_LEVEL=INFO
      - BACKEND_URL=http://localhost:8000
      - BACKEND_WS_URL=ws://localhost:8000/ws
      - ALSA_CARD=3
      - PULSE_RUNTIME_PATH=/dev/null
    volumes:
      - /dev:/dev
      - /sys:/sys
      - /proc:/proc
      - /var/run/dbus:/var/run/dbus
      - /usr/share/alsa:/usr/share/alsa:ro
      - /etc/asound.conf:/etc/asound.conf:ro
      - /lib/modules:/lib/modules:ro
      - /etc/modprobe.d:/etc/modprobe.d:ro
      - /var/lib/alsa:/var/lib/alsa:ro
      - puertocho-logs:/app/logs
      - puertocho-config:/app/config
      - ./puertocho-assistant-hardware/app/captured_audio:/app/captured_audio
      - ./audio:/app/audio

    devices:
      - /dev/i2c-1:/dev/i2c-1
      - /dev/spidev0.0:/dev/spidev0.0
      - /dev/spidev0.1:/dev/spidev0.1
      - /dev/snd:/dev/snd
      - /dev/gpiomem:/dev/gpiomem
      - /dev/mem:/dev/mem
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# Volumes para persistencia (futuro)
volumes:
  puertocho-logs:
    driver: local
  puertocho-config:
    driver: local
  puertocho-audio-verification:
    driver: local
