#!/usr/bin/env python3
"""
Script de verificaci√≥n del sistema para asistente con openWakeWord
Ejecuta checks completos cuando las dependencias est√°n instaladas
"""

import os
import sys
import subprocess
import json
from pathlib import Path

def check_system_dependencies():
    """Verificar dependencias del sistema"""
    print("üîç Verificando dependencias del sistema...")
    
    # Verificar librer√≠as del sistema
    system_libs = [
        'libsndfile1',
        'libasound2-dev', 
        'libspeexdsp-dev'
    ]
    
    for lib in system_libs:
        try:
            result = subprocess.run(['dpkg', '-l', lib], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                print(f"  ‚úÖ {lib}")
            else:
                print(f"  ‚ùå {lib} - no instalado")
        except Exception:
            print(f"  ‚ö†Ô∏è  {lib} - no se pudo verificar")

def check_python_dependencies():
    """Verificar dependencias de Python"""
    print("\nüêç Verificando dependencias de Python...")
    
    dependencies = [
        'openwakeword',
        'sounddevice', 
        'numpy',
        'requests',
        'python-dotenv',
        'webrtcvad'
    ]
    
    missing = []
    for dep in dependencies:
        try:
            __import__(dep.replace('-', '_'))
            print(f"  ‚úÖ {dep}")
        except ImportError:
            print(f"  ‚ùå {dep}")
            missing.append(dep)
    
    if missing:
        print(f"\nüí° Para instalar dependencias faltantes:")
        print(f"   pip install {' '.join(missing)}")
    
    return len(missing) == 0

def check_audio_devices():
    """Verificar dispositivos de audio"""
    print("\nüéµ Verificando dispositivos de audio...")
    
    try:
        import sounddevice as sd
        devices = sd.query_devices()
        print(f"  üì± {len(devices)} dispositivos encontrados")
        
        # Buscar dispositivos de entrada
        input_devices = [d for d in devices if d['max_input_channels'] > 0]
        print(f"  üé§ {len(input_devices)} dispositivos de entrada")
        
        if input_devices:
            default = sd.default.device[0]
            if default is not None:
                print(f"  üîä Dispositivo por defecto: {devices[default]['name']}")
            else:
                print("  ‚ö†Ô∏è  No hay dispositivo de entrada por defecto")
                
            # Test r√°pido de captura
            try:
                test_data = sd.rec(frames=1024, samplerate=16000, channels=1, dtype='int16')
                sd.wait()
                print("  ‚úÖ Captura de audio funcional")
            except Exception as e:
                print(f"  ‚ùå Error en captura: {e}")
        else:
            print("  ‚ùå No hay dispositivos de entrada disponibles")
            
    except ImportError:
        print("  ‚ùå sounddevice no disponible")
    except Exception as e:
        print(f"  ‚ùå Error verificando audio: {e}")

def check_gpio_access():
    """Verificar acceso a GPIO (si est√° en RPi)"""
    print("\nüîå Verificando acceso a GPIO...")
    
    # Verificar si estamos en Raspberry Pi
    try:
        with open('/proc/cpuinfo', 'r') as f:
            cpuinfo = f.read()
            if 'raspberry pi' in cpuinfo.lower() or 'bcm' in cpuinfo.lower():
                print("  üçì Raspberry Pi detectado")
                
                # Verificar acceso a /dev/gpiomem
                if os.path.exists('/dev/gpiomem'):
                    print("  ‚úÖ /dev/gpiomem disponible")
                else:
                    print("  ‚ùå /dev/gpiomem no disponible")
                
                # Test b√°sico de RPi.GPIO
                try:
                    import RPi.GPIO as GPIO
                    GPIO.setmode(GPIO.BCM)
                    print("  ‚úÖ RPi.GPIO funcional")
                    GPIO.cleanup()
                except Exception as e:
                    print(f"  ‚ùå Error RPi.GPIO: {e}")
            else:
                print("  ‚ÑπÔ∏è  No es Raspberry Pi - GPIO no disponible")
    except Exception:
        print("  ‚ö†Ô∏è  No se pudo determinar plataforma")

def check_openwakeword_models():
    """Verificar modelos de openWakeWord"""
    print("\nüß† Verificando modelos de openWakeWord...")
    
    try:
        import openwakeword
        from openwakeword.model import Model
        
        # Intentar descargar modelos
        print("  üì• Descargando modelos preentrenados...")
        openwakeword.utils.download_models()
        print("  ‚úÖ Modelos descargados")
        
        # Crear modelo de prueba
        print("  üîÑ Inicializando modelo...")
        model = Model(inference_framework='onnx')
        
        available_models = list(model.models.keys()) if hasattr(model, 'models') else []
        print(f"  üéØ {len(available_models)} modelos disponibles: {', '.join(available_models)}")
        
        # Test b√°sico de predicci√≥n
        if available_models:
            import numpy as np
            test_audio = np.zeros(1280, dtype=np.int16)  # 80ms @ 16kHz
            prediction = model.predict(test_audio)
            print(f"  ‚úÖ Predicci√≥n test: {max(prediction.values()):.3f}")
        
        return True
        
    except ImportError:
        print("  ‚ùå openwakeword no disponible")
        return False
    except Exception as e:
        print(f"  ‚ùå Error: {e}")
        return False

def check_transcription_service():
    """Verificar servicio de transcripci√≥n"""
    print("\nü§ñ Verificando servicio de transcripci√≥n...")
    
    # Leer URL del .env o usar default
    transcription_url = os.getenv('TRANSCRIPTION_SERVICE_URL', 'http://localhost:5000/transcribe')
    print(f"  üîó URL: {transcription_url}")
    
    try:
        import requests
        
        # Verificar health endpoint
        health_url = transcription_url.replace('/transcribe', '/health')
        response = requests.get(health_url, timeout=5)
        if response.status_code == 200:
            print("  ‚úÖ Servicio disponible (health check)")
        else:
            print(f"  ‚ö†Ô∏è  Health check: HTTP {response.status_code}")
    except requests.exceptions.ConnectionError:
        print("  ‚ùå Servicio no disponible")
    except Exception as e:
        print(f"  ‚ùå Error: {e}")

def check_project_files():
    """Verificar archivos del proyecto"""
    print("\nüìÅ Verificando archivos del proyecto...")
    
    required_files = [
        'main.py',
        'requirements.txt', 
        'commands.json',
        '../docker-compose.yml',
        '../Dockerfile',
        '../PROJECT_TRACKER.md'
    ]
    
    for file in required_files:
        if os.path.exists(file):
            print(f"  ‚úÖ {file}")
        else:
            print(f"  ‚ùå {file}")

def run_functional_test():
    """Ejecutar test funcional b√°sico"""
    print("\nüß™ Ejecutando test funcional...")
    
    try:
        # Ejecutar test simple
        result = subprocess.run([sys.executable, 'test_simple.py'], 
                              capture_output=True, text=True, cwd='.')
        
        if result.returncode == 0:
            print("  ‚úÖ Tests unitarios pasaron")
            # Contar tests ejecutados
            if 'Ran' in result.stdout:
                for line in result.stdout.split('\n'):
                    if 'Ran' in line and 'tests' in line:
                        print(f"  üìä {line.strip()}")
        else:
            print("  ‚ùå Tests fallaron")
            print(f"  üîç Error: {result.stderr[:200]}")
            
    except Exception as e:
        print(f"  ‚ùå Error ejecutando tests: {e}")

def check_docker_setup():
    """Verificar configuraci√≥n Docker"""
    print("\nüê≥ Verificando configuraci√≥n Docker...")
    
    try:
        # Verificar Docker
        result = subprocess.run(['docker', '--version'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print(f"  ‚úÖ {result.stdout.strip()}")
        else:
            print("  ‚ùå Docker no disponible")
            
        # Verificar docker-compose
        result = subprocess.run(['docker', 'compose', 'version'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print(f"  ‚úÖ Docker Compose disponible")
        else:
            print("  ‚ùå Docker Compose no disponible")
            
    except Exception as e:
        print(f"  ‚ùå Error: {e}")

def main():
    """Funci√≥n principal"""
    print("üîß VERIFICACI√ìN COMPLETA DEL SISTEMA")
    print("=" * 50)
    
    # Cambiar al directorio app si no estamos ah√≠
    if not os.path.exists('main.py'):
        if os.path.exists('app/main.py'):
            os.chdir('app')
        else:
            print("‚ùå No se encontr√≥ main.py")
            return False
    
    # Ejecutar todas las verificaciones
    check_system_dependencies()
    python_deps_ok = check_python_dependencies()
    check_project_files()
    
    if python_deps_ok:
        check_audio_devices()
        check_openwakeword_models()
        check_transcription_service()
        run_functional_test()
    else:
        print("\n‚ö†Ô∏è  Saltando tests avanzados - instalar dependencias primero")
    
    check_gpio_access()
    check_docker_setup()
    
    print("\n" + "=" * 50)
    if python_deps_ok:
        print("‚úÖ Verificaci√≥n completa terminada")
        print("üéâ Sistema listo para ejecutar el asistente")
    else:
        print("‚ö†Ô∏è  Verificaci√≥n parcial - instalar dependencias")
        print("üí° Ejecutar: pip install -r requirements.txt")
    
    return python_deps_ok

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1) 