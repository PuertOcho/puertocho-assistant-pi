#!/usr/bin/env python3
"""
üé§ INSTALADOR AUTOM√ÅTICO - Asistente de Voz Puertocho con openWakeWord
Script que automatiza todo el proceso de configuraci√≥n e instalaci√≥n
"""

import os
import sys
import subprocess
import time

def print_header(title):
    print(f"\n{'='*60}")
    print(f"üé§ {title}")
    print(f"{'='*60}")

def print_step(step, title):
    print(f"\n{'='*60}")
    print(f"‚úÖ PASO {step}: {title}")
    print(f"{'='*60}")

def run_script(script_name, description):
    """Ejecutar un script Python y mostrar el resultado"""
    print(f"\nüîÑ Ejecutando: {description}")
    print(f"üìÑ Script: {script_name}")
    print("-" * 50)
    
    try:
        result = subprocess.run([sys.executable, script_name], 
                              capture_output=False, 
                              text=True)
        
        if result.returncode == 0:
            print(f"‚úÖ {description} - COMPLETADO")
            return True
        else:
            print(f"‚ùå {description} - ERROR (c√≥digo: {result.returncode})")
            return False
            
    except Exception as e:
        print(f"‚ùå Error ejecutando {script_name}: {e}")
        return False

def run_docker_command(description):
    """Ejecutar comando Docker en segundo plano"""
    print(f"\nüîÑ {description}")
    print("-" * 50)
    
    # Comandos para ejecutar en background (detached)
    background_commands = [
        ["docker", "compose", "up", "-d", "--build"],
        ["docker-compose", "up", "-d", "--build"]
    ]
    
    # Comandos para mostrar logs
    log_commands = [
        ["docker", "compose", "logs", "-f", "puertocho-assistant"],
        ["docker-compose", "logs", "-f", "puertocho-assistant"]
    ]
    
    # Ejecutar en background
    success = False
    cmd_used = 0
    
    for i, cmd in enumerate(background_commands):
        try:
            print(f"üîÑ Ejecutando en segundo plano: {' '.join(cmd)}")
            result = subprocess.run(cmd, check=True, capture_output=True, text=True)
            success = True
            cmd_used = i
            break
        except (subprocess.CalledProcessError, FileNotFoundError) as e:
            print(f"‚ö†Ô∏è Error con {' '.join(cmd[:2])}: {e}")
            continue
    
    if not success:
        return False
    
    print("‚úÖ Asistente ejecut√°ndose en segundo plano")
    print("üîó Contenedor: puertocho-assistant")
    print("\nüìã CONTROLES DISPONIBLES:")
    print("   ‚Ä¢ Ver logs: docker compose logs -f puertocho-assistant")
    print("   ‚Ä¢ Detener: docker compose stop")
    print("   ‚Ä¢ Estado: docker compose ps")
    print("   ‚Ä¢ Reiniciar: docker compose restart")
    print()
    print("üéÆ GESTOR DEL ASISTENTE:")
    print("   python3 ejecutar_asistente.py")
    print()
    
    # Preguntar si quiere ver logs
    choice = input("‚ùì ¬øQuieres ver los logs en tiempo real? (S/n): ").lower().strip()
    
    if choice in ['', 's', 'si', 's√≠', 'y', 'yes']:
        print("\nüìã MOSTRANDO LOGS EN TIEMPO REAL")
        print("üí° Para salir de los logs: Ctrl+C (el asistente seguir√° funcionando)")
        print("="*60)
        
        try:
            subprocess.run(log_commands[cmd_used])
        except KeyboardInterrupt:
            print("\n\n‚úÖ Logs interrumpidos (asistente sigue funcionando)")
            print("üí° Para ver logs nuevamente: docker compose logs -f puertocho-assistant")
        except Exception as e:
            print(f"‚ö†Ô∏è Error mostrando logs: {e}")
            print("üí° Puedes ver los logs manualmente con: docker compose logs -f puertocho-assistant")
    
    return True

def check_requirements():
    """Verificar que los scripts necesarios existan"""
    print_step("0", "VERIFICANDO ARCHIVOS NECESARIOS")
    
    required_files = [
        "verificar_configuracion.py",
        "docker-compose.yml",
        "app/main.py",
        "app/requirements.txt"
    ]
    
    missing = []
    for file in required_files:
        if os.path.exists(file):
            print(f"‚úÖ {file}")
        else:
            print(f"‚ùå {file} - NO ENCONTRADO")
            missing.append(file)
    
    if missing:
        print(f"\n‚ùå FALTAN ARCHIVOS: {', '.join(missing)}")
        print("üí° Aseg√∫rate de estar en el directorio correcto del proyecto")
        return False
    
    print("\n‚úÖ Todos los archivos necesarios est√°n presentes")
    return True

def create_env_file():
    """Crear archivo .env b√°sico si no existe"""
    if not os.path.exists('.env'):
        print("\nüîß Creando archivo .env b√°sico...")
        
        env_content = """# Configuraci√≥n del Asistente de Voz Puertocho con openWakeWord
# Servicio de transcripci√≥n HTTP
TRANSCRIPTION_SERVICE_URL=http://localhost:5000/transcribe

# Configuraci√≥n de GPIO
BUTTON_PIN=22
LED_IDLE_PIN=17
LED_RECORD_PIN=27

# Configuraci√≥n openWakeWord
OPENWAKEWORD_MODEL_PATHS=alexa,hey_mycroft
OPENWAKEWORD_THRESHOLD=0.5
OPENWAKEWORD_VAD_THRESHOLD=0.0
OPENWAKEWORD_ENABLE_SPEEX_NS=false
OPENWAKEWORD_INFERENCE_FRAMEWORK=onnx

# Configuraci√≥n de audio
AUDIO_SAMPLE_RATE=16000
AUDIO_CHANNELS=1
AUDIO_CHUNK_SIZE=1280
"""
        
        with open('.env', 'w') as f:
            f.write(env_content)
        
        print("‚úÖ Archivo .env creado con configuraci√≥n por defecto")
        return True
    else:
        print("‚úÖ Archivo .env ya existe")
        return True

def install_openwakeword():
    """Instalar openWakeWord y dependencias"""
    print_step("1", "INSTALACI√ìN DE OPENWAKEWORD")
    
    try:
        print("üîÑ Verificando si openWakeWord est√° instalado...")
        result = subprocess.run([sys.executable, "-c", "import openwakeword; print('openWakeWord ya est√° instalado')"], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ openWakeWord ya est√° instalado")
            return True
        else:
            print("üì¶ Instalando openWakeWord...")
            result = subprocess.run([sys.executable, "-m", "pip", "install", "openwakeword"], 
                                  capture_output=False, text=True)
            
            if result.returncode == 0:
                print("‚úÖ openWakeWord instalado correctamente")
                return True
            else:
                print("‚ùå Error instalando openWakeWord")
                return False
                
    except Exception as e:
        print(f"‚ùå Error verificando/instalando openWakeWord: {e}")
        return False

def download_models():
    """Descargar modelos preentrenados de openWakeWord"""
    print_step("2", "DESCARGA DE MODELOS PREENTRENADOS")
    
    try:
        print("üì• Descargando modelos preentrenados de openWakeWord...")
        result = subprocess.run([
            sys.executable, "-c", 
            "import openwakeword; openwakeword.utils.download_models(); print('Modelos descargados correctamente')"
        ], capture_output=False, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Modelos preentrenados descargados")
            return True
        else:
            print("‚ö†Ô∏è Error descargando modelos (pero el asistente puede funcionar)")
            return True  # No es cr√≠tico
            
    except Exception as e:
        print(f"‚ö†Ô∏è Error descargando modelos: {e}")
        print("üí° Los modelos se descargar√°n autom√°ticamente en el primer uso")
        return True  # No es cr√≠tico

def main():
    print_header("INSTALADOR AUTOM√ÅTICO DEL ASISTENTE DE VOZ PUERTOCHO")
    print("üöÄ Este script configurar√° autom√°ticamente tu asistente de voz con openWakeWord")
    print("‚è±Ô∏è  Tiempo estimado: 2-4 minutos")
    print("üìã Pasos a realizar:")
    print("   1Ô∏è‚É£  Instalar openWakeWord")
    print("   2Ô∏è‚É£  Descargar modelos preentrenados")
    print("   3Ô∏è‚É£  Configurar variables de entorno")
    print("   4Ô∏è‚É£  Verificar configuraci√≥n")
    print("   5Ô∏è‚É£  Ejecutar asistente en Docker")
    
    print("\nüí° VENTAJAS DE OPENWAKEWORD:")
    print("   ‚Ä¢ No requiere API keys (funciona offline)")
    print("   ‚Ä¢ Modelos preentrenados: 'alexa', 'hey mycroft', etc.")
    print("   ‚Ä¢ Entrenamiento de modelos personalizados")
    print("   ‚Ä¢ Supresi√≥n de ruido y VAD integrados")
    
    print("\n" + "="*60)
    input("üî• Presiona ENTER para comenzar la instalaci√≥n...")
    
    # Paso 0: Verificar archivos
    if not check_requirements():
        sys.exit(1)
    
    # Paso 1: Instalar openWakeWord
    if not install_openwakeword():
        print("‚ùå No se pudo instalar openWakeWord")
        print("üí° Intenta manualmente: pip install openwakeword")
        sys.exit(1)
    
    # Paso 2: Descargar modelos
    download_models()
    
    # Paso 3: Configurar variables de entorno
    print_step("3", "CONFIGURACI√ìN DE VARIABLES DE ENTORNO")
    if not create_env_file():
        print("‚ùå No se pudo crear el archivo .env")
        sys.exit(1)
    
    print("\nüí° CONFIGURACI√ìN ACTUAL:")
    print("   üéØ Modelos: alexa, hey_mycroft (puedes cambiarlos en .env)")
    print("   üéöÔ∏è Umbral: 0.5 (aj√∫stalo seg√∫n tu entorno)")
    print("   üîä VAD: Deshabilitado (habil√≠talo si hay mucho ruido)")
    print("   ü§ñ Transcripci√≥n: http://localhost:5000/transcribe")
    
    # Paso 4: Verificar configuraci√≥n
    print_step("4", "VERIFICACI√ìN DE CONFIGURACI√ìN")
    print("üîç Verificando que todo est√© configurado correctamente...")
    
    verification_ok = run_script("verificar_configuracion.py", "Verificaci√≥n de configuraci√≥n")
    
    if not verification_ok:
        print("\n‚ö†Ô∏è ADVERTENCIA: Hay problemas en la configuraci√≥n")
        print("üí° Puedes continuar, pero el asistente podr√≠a no funcionar correctamente")
        
        choice = input("\n‚ùì ¬øContinuar de todas formas? (s/N): ").lower().strip()
        if choice not in ['s', 'si', 's√≠', 'y', 'yes']:
            print("üõë Instalaci√≥n cancelada")
            print("üîß Revisa los problemas y ejecuta el script nuevamente")
            sys.exit(1)
    
    # Paso 5: Ejecutar Docker
    print_step("5", "EJECUTANDO ASISTENTE EN DOCKER")
    print("üê≥ Construyendo y ejecutando el contenedor Docker en segundo plano...")
    print("‚è≥ Esto puede tomar unos minutos la primera vez...")
    print("\nüéØ WAKE WORDS DISPONIBLES:")
    print("   ‚Ä¢ 'Alexa' (modelo alexa)")
    print("   ‚Ä¢ 'Hey Mycroft' (modelo hey_mycroft)")
    print("   ‚Ä¢ O entrena tu propio modelo 'Puertocho'")
    
    print("\nüí° VENTAJAS DEL MODO SEGUNDO PLANO:")
    print("   ‚Ä¢ El asistente sigue funcionando aunque cierres la terminal")
    print("   ‚Ä¢ Puedes ver logs cuando quieras")
    print("   ‚Ä¢ Control total desde la misma consola")
    print("   ‚Ä¢ F√°cil detener/reiniciar sin interrumpir otras tareas")
    
    print("\n" + "="*60)
    input("üöÄ Presiona ENTER para ejecutar el asistente...")
    
    # Limpiar pantalla para mejor visualizaci√≥n
    os.system('clear' if os.name == 'posix' else 'cls')
    
    print_header("üé§ INICIANDO ASISTENTE DE VOZ PUERTOCHO")
    print("üéØ Wake words: 'Alexa' y 'Hey Mycroft'")
    print("üî¥ LED Rojo (GPIO 27): Escuchando")
    print("üü¢ LED Verde (GPIO 17): Listo")
    print("üîò Bot√≥n (GPIO 22): Activaci√≥n manual")
    print("ü§ñ Transcripci√≥n: Servicio HTTP Local")
    print("\nüí° Para detener el asistente: Ctrl+C")
    print("="*60)
    
    success = run_docker_command("Ejecutando contenedor Docker")
    
    if success:
        print("\nüéâ ¬°ASISTENTE EJECUT√ÅNDOSE EN SEGUNDO PLANO!")
        print("üîó El asistente est√° funcionando correctamente")
        print()
        print("üìã COMANDOS √öTILES:")
        print("   python3 ejecutar_asistente.py         # Gestor completo")
        print("   docker compose logs -f                # Ver logs")
        print("   docker compose stop                   # Detener")
        print("   docker compose restart                # Reiniciar")
        print()
        print("üéØ ¬°Tu asistente con openWakeWord est√° listo!")
        print("üí° Puedes entrenar modelos personalizados siguiendo la documentaci√≥n")
    else:
        print("\n‚ùå Error ejecutando el contenedor Docker")
        print("üîß Comandos para intentar manualmente:")
        print("   docker compose up -d --build")
        print("   # o")
        print("   docker-compose up -d --build")
        sys.exit(1)

def show_usage():
    """Mostrar ayuda de uso"""
    print("üé§ Instalador Autom√°tico - Asistente de Voz Puertocho con openWakeWord")
    print("=" * 70)
    print("USO:")
    print("  python3 instalar_asistente.py")
    print()
    print("DESCRIPCI√ìN:")
    print("  Automatiza todo el proceso de instalaci√≥n:")
    print("  1. Instalar openWakeWord")
    print("  2. Descargar modelos preentrenados") 
    print("  3. Configurar variables de entorno")
    print("  4. Verificar configuraci√≥n")
    print("  5. Ejecutar asistente en Docker")
    print()
    print("REQUISITOS:")
    print("  ‚Ä¢ Docker instalado")
    print("  ‚Ä¢ Conexi√≥n a internet (para descargar modelos)")
    print("  ‚Ä¢ Servicio de transcripci√≥n en http://localhost:5000/transcribe")
    print("  ‚Ä¢ Hardware conectado (LEDs, bot√≥n, micr√≥fono)")
    print()
    print("VENTAJAS DE OPENWAKEWORD:")
    print("  ‚Ä¢ Sin API keys necesarias")
    print("  ‚Ä¢ Modelos preentrenados disponibles")
    print("  ‚Ä¢ Entrenamiento de modelos personalizados")
    print("  ‚Ä¢ Funciona completamente offline")

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] in ['-h', '--help', 'help']:
        show_usage()
    else:
        try:
            main()
        except KeyboardInterrupt:
            print("\n\nüõë Instalaci√≥n interrumpida por el usuario")
            sys.exit(1)
        except Exception as e:
            print(f"\n‚ùå Error inesperado: {e}")
            sys.exit(1) 